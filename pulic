#!/usr/bin/perl 

# Copyright (c) 2011 Ákos Kovács <akoskovacs@gmx.com> Puli Compiler and Preprocessor
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use File::Basename;
use Getopt::Std;

use strict;
use warnings;

our($opt_t, $opt_k, $opt_h);
$Getopt::Std::STANDARD_HELP_VERSION = 1;

my $VERSION = "v0.1";
my $bin_name = ();
my @source = ();
my $out_file = ();
my $wdir = `pwd`;
my $lnum = ();
my $randfunc = <<'EOF';

#define argumentum(ord) \
(argc <= (ord)) ? argv[(ord)] : "semmi"
#define argumentumok    argc-1
    
inline int randint(int max) 
{
    srand(time(NULL)); 
    return rand() % max;
} 

EOF

my @header = (
    "#include <iostream>\n", 
    "#include <cstdio>\n",
    "#include <ctime>\n",
    "#include <cstdlib>\n",
    "#include <string>\n\n",
    "using namespace std;\n\n",
    $randfunc
);

my %keywords = (
    'egész'      =>   'int',
    'karak'      =>   'char',
    'szöveg'     =>   'string',
    'egyesített' =>   'struct {',
    'unió'       =>   'union {',
    'kistört'    =>   'float',
    'tört'       =>   'double', 
    'semmi'      =>   'void',
    'vég'        =>   '}',
    'vissz'      =>   'return',
    'megáll'     =>   'break',
    'folytat'    =>   'continue',
    'ki'         =>   'cout',
    'be'         =>   'cin',
    'hiba'       =>   'cerr',
    'nem'        =>   '!',
    'sorozat'    =>   'enum',
    'ref'        =>   '&',
    'akkor'      =>   ') {',
    'tedd'       =>   'do ',
    'ezt'        =>   '{',
    'egyenlő'    =>   '==',
    'nagyobb'    =>   '>',
    'kisebb'     =>   '<',
    'hamis'      =>   '0',
    'igaz'       =>   '1',
    'újsor'      =>   'endl',
    'méret'      =>   'size_t',
    'regiszter'  =>   'register',
    'méreted'    =>   'sizeof',
    'ha'         =>   'if (',
    'hosszú'     =>   'long',
    'konst'      =>   'const',
    'esetleg'    =>   '} else if (',
    'egyébként'  =>   '} else {',
    'kezdet'     =>   "int main(int argc, char **argv)\n{\n",
    'vagy'       =>   '||',
    'és'         =>   '&&',
    'mindig'     =>   'for (;;) {',
    'prognév'    =>   'string(argv[0])',
    'vélszám'    =>   'randint'
);

#==~-------------------------------------------~==#
#                   Entry Point                   #
#==~-------------------------------------------~==#

print "Puli Compiler $VERSION\n" .
    "Copyright (C) Ákos Kovács - 2011\n\n";

if (not defined($ARGV[0])) {
        die "[HIBA]: Nincs fájl!\n";
}

&getopts("htk:");

if ($opt_h) {
    &print_help();
}

sub HELP_MESSAGE {
    &print_help();
}

foreach my $file (@ARGV) {
    if (!-e $file) {
        die "[HIBA]: A fájl nem található!\n";
    }
    $lnum = 1;
    if (defined($opt_t)) {
        $bin_name = $file;
    } else {
        if (defined($opt_k)) {
            $bin_name = $opt_k;
        } else {
            $bin_name = $ARGV[0];
        }
    }
    $bin_name =~ s/\.pu$//i;
    &process_file($file);
}
print "\n";

#==~-------------------------------------------~==#
#                End of main program              #
#==~-------------------------------------------~==#

sub process_file($) {
    my $file = shift;

    open(FILE, '<' . $file) or
        die "[HIBA]: Nem sikerült megynyitni fájlt: $!";

    @source = <FILE>;
    close (FILE);
    print " [F] $file\n";
    &replace_all();
    &generate_code($file);
    print `g++ $out_file -o $bin_name`;
}

# It replaces everything line-by-line in the @source, if it recognized
# as a keyword, from the %keywords hash. It protect the strings from
# the accidental overwriting. The subrountine uses regexes, which cares
# to replace keywords which aligned at word boundaries, except some
# special tokens like ";,<,>,etc".
sub replace_all {
    my @strings = ();
    foreach my $line (@source) {
        # Save all strings to the @strings list to protect, from overwriting
        # when they keyword replacement occures. The "[string]" will replaced 
        # with the __pulic__string__marker__. Not the most elegant solvage. :-(
        while ($line =~ s/\"(.+)\"/__pulic__string__marker__/g) {
            push @strings, $1;
        }

        foreach (keys %keywords) {
            if ($line =~ m/^\s*$/ or $line =~ m/^\s*\/\//) {
                last;
            }
            $line =~ s/\b$_\b/$keywords{$_}/g;
            $line =~ s/([;<>=,\*\-\+\\\/])$_/$1$keywords{$_}/g;
            $line =~ s/$_([;<>=,\*\-\+\\\/])/$keywords{$_}$1/g;
        } # keys %keywords
        # Write-back every string (if have) to their place.   
        if (@strings) {
            foreach my $string (@strings) {
                $line =~ s/__pulic__string__marker__/\"$string\"/;
            }
        }
        undef(@strings);

        if ($line =~ m/fgv/) {
            &parse_func(\$line);
        }

        if ($line =~ /amíg/) {
            &parse_while(\$line);
        }

        $lnum++;
    } # @source
}

sub parse_func($) {
    my $line_ref    = shift;
    if ($$line_ref =~ m/fgv\s+(\w+)\s*\((.*)\)\s*<-\s*(\w+)/) {
        &create_function($line_ref, $3, $1, $2);
    } elsif ($$line_ref =~ m/fgv\s+(\w+)\s*\((.*)\)/){ 
        &create_function($line_ref, 'void', $1, $2);
    } else {
        die "[HIBA]: Rossz függvénymegadás, a(z) $lnum. sorban!";
    }
}

sub parse_while($) {
    my $line_ref    = shift;
    $$line_ref =~ s/amíg\s*([^;]*)\s*;([^;]*)\s*;([^;]*)\s*addig/for ($1;$2;$3) {/g;
    $$line_ref =~ s/amíg\s*([^;]*)\s*addig/while ($1) {/g;
}

sub create_function($$$$) {
    my $line_ref    = shift;
    my $ret_type    = shift;
    my $fn_name     = shift;
    my $params      = shift;
    my $head        = ();

    $$line_ref = "$ret_type $fn_name($params)\n{\n";

    #$params =~ s/=[^,\)]*([,\)])/\1/; # TODO: Make _every_ value usable as default
    # Cut out the default parameters for the prototype

    $params =~ s/=\s*".*"//;    
    $head = "$ret_type $fn_name($params);\n";
    push @header, $head;
}

sub generate_code($) {
    my $file        = shift;

    my @out_file    = ();
    @out_file       = fileparse('/' . $file, '.pu');
    $out_file       = '/tmp/' . $out_file[0] . '.cpp';
    
    unshift @source, @header;

    open(OUT, '>' . $out_file) or
        die "[HIBA]: Nem sikerült megynyitni fájlt: $!";
    
    print(OUT @source);
    
    close (OUT);
}

sub print_help {
    print "Opciók:\n" .
    "\t-t\tTöbb programfájl különfordítása (külön binárisként)\n" .
    "\t-k\tA kimeneti bináris fájl neve (alapértelmezetten a fájl neve .pu nélkül)\n" .
    "\t-h vagy --help\tEz az üzenet\n\n";
    exit(0);
}
